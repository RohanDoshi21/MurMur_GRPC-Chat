// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcServerServiceClient is the client API for GrpcServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcServerServiceClient interface {
	SendMessage(ctx context.Context, opts ...grpc.CallOption) (GrpcServerService_SendMessageClient, error)
}

type grpcServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcServerServiceClient(cc grpc.ClientConnInterface) GrpcServerServiceClient {
	return &grpcServerServiceClient{cc}
}

func (c *grpcServerServiceClient) SendMessage(ctx context.Context, opts ...grpc.CallOption) (GrpcServerService_SendMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrpcServerService_ServiceDesc.Streams[0], "/pb.GrpcServerService/SendMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcServerServiceSendMessageClient{stream}
	return x, nil
}

type GrpcServerService_SendMessageClient interface {
	Send(*SendMessageRequest) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type grpcServerServiceSendMessageClient struct {
	grpc.ClientStream
}

func (x *grpcServerServiceSendMessageClient) Send(m *SendMessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcServerServiceSendMessageClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GrpcServerServiceServer is the server API for GrpcServerService service.
// All implementations must embed UnimplementedGrpcServerServiceServer
// for forward compatibility
type GrpcServerServiceServer interface {
	SendMessage(GrpcServerService_SendMessageServer) error
	mustEmbedUnimplementedGrpcServerServiceServer()
}

// UnimplementedGrpcServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcServerServiceServer struct {
}

func (UnimplementedGrpcServerServiceServer) SendMessage(GrpcServerService_SendMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedGrpcServerServiceServer) mustEmbedUnimplementedGrpcServerServiceServer() {}

// UnsafeGrpcServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcServerServiceServer will
// result in compilation errors.
type UnsafeGrpcServerServiceServer interface {
	mustEmbedUnimplementedGrpcServerServiceServer()
}

func RegisterGrpcServerServiceServer(s grpc.ServiceRegistrar, srv GrpcServerServiceServer) {
	s.RegisterService(&GrpcServerService_ServiceDesc, srv)
}

func _GrpcServerService_SendMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcServerServiceServer).SendMessage(&grpcServerServiceSendMessageServer{stream})
}

type GrpcServerService_SendMessageServer interface {
	Send(*Message) error
	Recv() (*SendMessageRequest, error)
	grpc.ServerStream
}

type grpcServerServiceSendMessageServer struct {
	grpc.ServerStream
}

func (x *grpcServerServiceSendMessageServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcServerServiceSendMessageServer) Recv() (*SendMessageRequest, error) {
	m := new(SendMessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GrpcServerService_ServiceDesc is the grpc.ServiceDesc for GrpcServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GrpcServerService",
	HandlerType: (*GrpcServerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMessage",
			Handler:       _GrpcServerService_SendMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/service.proto",
}
